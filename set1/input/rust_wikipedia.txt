Rust is a general-purpose, multi-paradigm, compiled programming language developed by Mozilla Research.[12] It is designed to be a "safe, concurrent, practical language",[13][14] supporting pure-functional, concurrent-actor[dubious â€“ discuss][citation needed], imperative-procedural, and object-oriented styles.

The language grew out of a personal project by Mozilla employee Graydon Hoare. Mozilla began sponsoring the project in 2009[15] and announced it in 2010.[16] The same year, work shifted from the initial compiler (written in OCaml) to the self-hosting compiler written in Rust.[17] Known as rustc, it successfully compiled itself in 2011.[18] rustc uses LLVM as its back end.

The first numbered pre-alpha release of the Rust compiler occurred in January 2012.[19] Rust 1.0, the first stable release, was released on May 15, 2015.[1]

Although its development is sponsored by Mozilla, it is an open community project. The design of the language has been refined through the experiences of writing the Servo[20] web browser layout engine and the Rust compiler. A large portion of current commits are from community members.[21]

The language takes its name from the rust family of fungi.[22]

Contents  [hide] 
1	Design
2	History
3	Projects using Rust
4	Examples
5	See also
6	References
7	External links
Design[edit]
The goal of Rust is to be a good language for creating highly concurrent and highly safe systems.[23] This has led to a feature set with an emphasis on safety, control of memory layout, and concurrency. Performance of safe code is expected to be slower than C++. However, performance is comparable to C++ code that manually takes precautions.[24]

The syntax of Rust is similar to C and C++, with blocks of code delimited by curly brackets, and control flow keywords such as if, else, while, and for. Not all C or C++ keywords are present, however, while others (such as the match keyword for multi-directional branching, similar to switch in other languages) will be less familiar to programmers coming from these languages. Despite the syntactic resemblance, Rust is semantically very different from C and C++.

The system is designed to be memory safe, and it does not permit null pointers or dangling pointers.[25][26] Data values can only be initialized through a fixed set of forms, all of which require their inputs to be already initialized.[27] A system of pointer lifetimes and freezing allows the compiler to prevent many types of errors that are possible to write in C++, even when using its smart pointers.

The type system supports a mechanism similar to type classes, called 'traits', inspired directly by the Haskell language. This is a facility for ad-hoc polymorphism, achieved by adding constraints to type variable declarations. Other features from Haskell, such as higher-kinded polymorphism, are not yet supported.

Rust does not use an automated garbage collection system like those used by Java or .Net.

Rust features type inference, for variables declared with the let keyword. Such variables do not require a value to be initially assigned in order to determine their type. A compile time error results if any branch of code fails to assign a value to the variable.[28] Functions can be given generic parameters but they must be explicitly bounded by traits. There is no way to leave off type signatures while still making use of methods and operators on the parameters.

The object system within Rust is based around implementations, traits and structured types. Implementations fulfill a role similar to that of classes within other languages, and are defined with the impl keyword. Inheritance and polymorphism are provided by traits; they allow methods to be defined and mixed in to implementations. Structured types are used to define fields. Implementations and traits cannot define fields themselves, and only traits can provide inheritance, in order to prevent the diamond inheritance problem of C++.

History[edit]
In addition to conventional static typing, prior to version 0.4 Rust also supported typestates. The typestate system modeled assertions before and after program statements, through use of a special check statement. Discrepancies could be discovered at compile time, rather than once a program was running, as might be the case with assertions in C or C++ code. The typestate concept was not unique to Rust, as it was first introduced in the NIL programming language.[29] Typestates were removed because in practice they found little use, though the same functionality can still be achieved with branding patterns.[30]

The style of the object system changed considerably within versions 0.2, 0.3 and 0.4 of Rust. Version 0.2 introduced classes for the first time, with version 0.3 adding a number of features including destructors and polymorphism through the use of interfaces. In Rust 0.4, traits were added as a means to provide inheritance; interfaces were unified with traits and removed as a separate feature. Classes were also removed, replaced by a combination of implementations and structured types.

Starting in Rust 0.9 and ending in Rust 0.11, Rust had two built-in pointer types, ~ and @, simplifying the core memory model. It reimplemented those pointer types in the standard library as Box and (the now removed) Gc.

In January 2014, the editor-in-chief of Dr Dobb's, Andrew Binstock, commented on Rust's chances to become a competitor to C++, as well as to the other upcoming languages D, Go and Nim (then Nimrod): according to Binstock, while Rust was "widely viewed as a remarkably elegant language", adoption of it stayed behind because the language kept changing between versions.[31] The first "stable" version of the Rust, version 1.0.0, was released in May 2015.[32]
